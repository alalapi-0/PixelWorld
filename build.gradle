import java.net.URL
import java.util.UUID

// === 顶层：插件 ===


// === 所有项目通用设置 ===
allprojects {
  apply plugin: 'eclipse'
  apply plugin: 'idea'

  idea {
    module {
      outputDir file('build/classes/java/main')
      testOutputDir file('build/classes/java/test')
    }
  }
}

// === 子模块 Java/Groovy 配置 ===
configure(subprojects) {
  apply plugin: 'java-library'
  apply plugin: 'groovy'

  if (name in ['core', 'html']) {
    sourceCompatibility = JavaVersion.VERSION_11
    targetCompatibility = JavaVersion.VERSION_11
    tasks.withType(JavaCompile).configureEach { options.release = 11 }
  }

  // 生成 assets.txt
  tasks.register('generateAssetList') {
    inputs.dir("${project.rootDir}/assets/")
    File assetsFolder = new File("${project.rootDir}/assets/")
    File assetsFile = new File(assetsFolder, "assets.txt")
    assetsFile.delete()
    fileTree(assetsFolder).collect { assetsFolder.relativePath(it) }.sort().each {
      assetsFile.append(it + "\n")
    }
  }
  processResources.dependsOn 'generateAssetList'

  compileJava {
    options.incremental = true
  }
}

// === 仓库与版本 ===
subprojects {
  version = "$projectVersion"
  ext.appName = 'PixelWorld'
  repositories {
    mavenCentral()
    mavenLocal()
    maven { url 'https://central.sonatype.com/repository/maven-snapshots/' }
    maven { url 'https://jitpack.io' }
  }
}

eclipse.project.name = 'PixelWorld-parent'

// === 自动下载 & 解压素材到根 assets/（顶层） ===
def assetsRoot = "${project.rootDir}/assets"
def downloadsDir = layout.buildDirectory.dir("asset-downloads")

tasks.register("assetsDownload") {
  onlyIf { file("${assetsRoot}/sources.txt").exists() }
  doLast {
    def downloadDir = downloadsDir.get().asFile
    def urls = file("${assetsRoot}/sources.txt")
      .readLines("UTF-8")
      .collect { it.trim() }
      .findAll { it && !it.startsWith("#") && it.toLowerCase().endsWith(".zip") }

    if (urls.empty) {
      logger.lifecycle("[assetsDownload] no .zip links found in assets/sources.txt")
      return
    }

    downloadDir.mkdirs()

    urls.each { urlString ->
      def url = new URL(urlString)
      def fileName = url.getPath().tokenize('/').last()
      if (!fileName) {
        fileName = UUID.randomUUID().toString() + ".zip"
      }
      def target = new File(downloadDir, fileName)
      logger.lifecycle("[assetsDownload] fetching ${urlString}")
      target.delete()
      url.openStream().withCloseable { input ->
        target.withOutputStream { output ->
          input.transferTo(output)
        }
      }
    }
  }
}

tasks.register("assetsUnpack", Copy) {
  dependsOn "assetsDownload"
  from({ fileTree(downloadsDir).matching { include "**/*.zip" }.files.collect { zipTree(it) } })
  into assetsRoot
  doLast { println "[assetsUnpack] unpacked into ${assetsRoot}" }
}

tasks.register("assetsClean") {
  doLast { delete downloadsDir.get().asFile }
}

// 便捷命令
tasks.register("runDesktop") { dependsOn("assetsUnpack", ":lwjgl3:run") }
tasks.register("buildWeb")   { dependsOn("assetsUnpack", ":html:dist") }
