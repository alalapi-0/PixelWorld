pluginManagement {
  repositories {
    gradlePluginPortal()
    mavenCentral()
  }
}

def installProxyCertificateIfPresent() {
  def certFile = file('config/certs/openai-egress-proxy.crt')
  if (!certFile.exists()) {
    return
  }

  def javaHomes = new LinkedHashSet<File>()
  javaHomes.add(new File(System.getProperty('java.home')))

  def gradleJdksDir = new File(System.getProperty('user.home'), '.gradle/jdks')
  if (gradleJdksDir.exists()) {
    gradleJdksDir.eachDir { javaHomes.add(it) }
  }

  def gradleUserHomeEnv = System.getenv('GRADLE_USER_HOME')
  if (gradleUserHomeEnv) {
    def envJdks = new File(gradleUserHomeEnv, 'jdks')
    if (envJdks.exists()) {
      envJdks.eachDir { javaHomes.add(it) }
    }
  }

  def isWindows = System.getProperty('os.name', '').toLowerCase().contains('win')
  def alias = 'openai-egress-proxy'

  for (File javaHome : javaHomes) {
    logger.lifecycle("[settings] Evaluating certificate import for ${javaHome}")
    def keytool = new File(javaHome, "bin/keytool" + (isWindows ? '.exe' : ''))
    def cacerts = new File(javaHome, 'lib/security/cacerts')
    if (!keytool.exists() || !cacerts.exists() || !cacerts.canWrite()) {
      logger.lifecycle("[settings] Skipping ${javaHome} (keytool=${keytool.exists()}, cacerts=${cacerts.exists()}, writable=${cacerts.canWrite()})")
      continue
    }

    def checkProcess = new ProcessBuilder(keytool.absolutePath, '-list', '-cacerts', '-storepass', 'changeit', '-alias', alias)
      .redirectErrorStream(true)
      .start()
    checkProcess.waitFor()
    if (checkProcess.exitValue() == 0) {
      logger.lifecycle("[settings] Certificate already present in ${javaHome}")
      continue
    }

    logger.lifecycle("[settings] Importing proxy certificate into JDK at ${javaHome}")
    def importProcess = new ProcessBuilder(keytool.absolutePath, '-importcert', '-cacerts', '-storepass', 'changeit', '-noprompt', '-alias', alias, '-file', certFile.absolutePath)
      .inheritIO()
      .start()
    def exitCode = importProcess.waitFor()
    if (exitCode != 0) {
      logger.warn("[settings] keytool import exited with code ${exitCode} for ${javaHome}")
    }
  }
}

installProxyCertificateIfPresent()
//plugins {
//   Applies the foojay-resolver plugin to allow automatic download of JDKs.
// id("org.gradle.toolchains.foojay-resolver-convention") version "0.9.0"
//}
// A list of which subprojects to load as part of the same larger project.
// You can remove Strings from the list and reload the Gradle project
// if you want to temporarily disable a subproject.
include 'core', 'html', 'lwjgl3'
